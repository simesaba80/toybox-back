// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/labstack/echo/v4"
	"github.com/simesaba80/toybox-back/internal/domain/repository"
	"github.com/simesaba80/toybox-back/internal/infrastructure/database/user"
	"github.com/simesaba80/toybox-back/internal/infrastructure/router"
	"github.com/simesaba80/toybox-back/internal/interface/controller"
	"github.com/simesaba80/toybox-back/internal/usecase"
	"github.com/simesaba80/toybox-back/pkg/db"
	"github.com/uptrace/bun"
	"time"
)

// Injectors from wire.go:

// InitializeApp はアプリケーションを初期化します
func InitializeApp() (*App, func(), error) {
	echo := ProvideEcho()
	db := ProvideDatabase()
	userRepository := user.NewUserRepository(db)
	userUseCase := ProvideUserUseCase(userRepository)
	userController := controller.NewUserController(userUseCase)
	routerRouter := router.NewRouter(echo, userController)
	app := NewApp(routerRouter, db)
	return app, func() {
	}, nil
}

// wire.go:

var RepositorySet = wire.NewSet(user.NewUserRepository, wire.Bind(new(repository.UserRepository), new(*user.UserRepository)))

var UseCaseSet = wire.NewSet(
	ProvideUserUseCase,
)

var ControllerSet = wire.NewSet(controller.NewUserController)

var InfrastructureSet = wire.NewSet(
	ProvideDatabase, router.NewRouter, ProvideEcho,
)

// ProviderSet は依存関係を定義します
var ProviderSet = wire.NewSet(
	RepositorySet,
	UseCaseSet,
	ControllerSet,
	InfrastructureSet,
	NewApp,
)

// ProvideDatabase はデータベース接続を提供します
func ProvideDatabase() *bun.DB {
	db.Init()
	return db.DB
}

// ProvideUserUseCase はUserUseCaseを提供します
func ProvideUserUseCase(repo repository.UserRepository) *usecase.UserUseCase {
	return usecase.NewUserUseCase(repo, 30*time.Second)
}

// ProvideEcho はEchoインスタンスを提供します
func ProvideEcho() *echo.Echo {
	return echo.New()
}

// NewApp はAppインスタンスを作成します
func NewApp(router2 *router.Router, database *bun.DB) *App {
	return &App{
		Router:   router2,
		Database: database,
	}
}

type App struct {
	Router   *router.Router
	Database *bun.DB
}

// Start アプリケーションの開始
func (app *App) Start() *echo.Echo {
	return app.Router.Setup()
}

// Cleanup アプリケーションのクリーンアップ
func (app *App) Cleanup() {
	if app.Database != nil {
		app.Database.Close()
	}
}
